#!/usr/bin/env bash
set -e -u -o pipefail

declare PROJECT_ROOT
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

declare RUN_MAKE_CHECKS=true

header(){
  echo -e "\n 🔆 $*"
  echo -e "─────────────────────────────────────────────────────\n"
}

info(){
  echo " 🔔 $*"
}

ok(){
  echo " ✔  $*"
}

warn(){
  echo " ⚠️  $*"
}

die(){
  echo -e "\n ✋ $* "
  echo -e "──────────────────── ⛔️⛔️⛔️ ────────────────────────\n"
  exit 1
}

# bumps up VERSION file to <upstream-version>-rhobs<patch>
# e.g. upstream 1.2.3 will be bumped to 1.2.3-rhobs1
# and if git tag 1.2.3-rhobs1 already exists, it will be bumped to 1.2.3-rhobs2
bumpup_version(){
  # get all tags with
  header "Bumping up the version"

  git fetch downstream --tags

  local version
  version="$(head -n1 VERSION)"

  # remove any trailing rhobs
  local upstream_version="${version//-rhobs*}"
  echo "found upstream version: $upstream_version"

  local patch
  # git tag | grep "^v$upstream_version-rhobs" | wc -l
  # NOTE: grep || true prevents grep from setting non-zero exit code
  # if there are no -rhobs tag

  patch="$( git tag | { grep "^v$upstream_version-rhobs" || true; } | wc -l )"
  (( patch+=1 ))

  rhobs_version="$upstream_version-rhobs$patch"

  echo "Updating version to $rhobs_version"
  echo "$rhobs_version" > VERSION

  version="$(head -n1 VERSION)"
  ok "version set to $version"
}

git_cherrypick_commits() {
  # NOTE: v0.59.1 does not contain this commit required to strip down the CRDs
  # so that operator-sdk can properly apply them
  # TODO: add refs here
  git cherry-pick -x eb8bd4d29e02fd969f97527b4aeadbf8524f02b9

}

generate_stripped_down_crds(){
  header "Generating stripped-down CRDs"

  mkdir -p example/stripped-down-crds
  make stripped-down-crds.yaml
  mv stripped-down-crds.yaml example/stripped-down-crds/all.yaml
}

change_api_group(){
  header "Changing api group to monitoring.rhobs"

  rm -f example/prometheus-operator-crd-full/monitoring.coreos.com*
  rm -f example/prometheus-operator-crd/monitoring.coreos.com*

  # NOTE: find command changes
  #  * kubebuilder group to monitoring.rhobs
  #  * the category  to rhobs-prometheus-operator
  #  * removes all shortnames

  find \( -path "./.git" \
          -o -path "./Documentation" \
          -o -path "./rhobs" \) -prune -o \
    -type f -exec \
    sed -i  \
      -e 's|monitoring.coreos.com|monitoring.rhobs|g'   \
      -e 's|+kubebuilder:resource:categories="prometheus-operator".*|+kubebuilder:resource:categories="rhobs-prometheus-operator"|g' \
      -e 's|github.com/prometheus-operator/prometheus-operator|github.com/rhobs/obo-prometheus-operator|g' \
  {} \;

  # replace only the api group in docs and not the links
  find ./Documentation \
    -type f -exec \
    sed -i  -e 's|monitoring.coreos.com|monitoring.rhobs|g'   \
  {} \;

  sed -e 's|monitoring\\.coreos\\.com|monitoring\\.rhobs|g' -i .mdox.validate.yaml

  ok "Changed api group to monitoring.rhobs"
}

change_container_image_repo(){
  local to_repo="$1"; shift

  header "Changing container repo from quay.io/prometheus -> $to_repo"

  find \( -path "./.git" \
          -o -path "./Documentation" \
          -o -path "./rhobs" \) -prune -o \
    -type f -exec sed -i  \
      -e "s|quay.io/prometheus-operator/|${to_repo}|g" \
  {} \;

  ok "Changed container repo to $to_repo"

}

remove_upstream_release_workflows() {
  header "Removing upstream only release workflows"

  git rm -f .github/workflows/release.yaml \
    .github/workflows/stale.yaml \
    .github/workflows/publish.yaml
}

validate_git_repos() {
  header "Validating git remotes"

  local num_remotes
  num_remotes=$(git remote | wc -l)

  local fails=0

  [[ "$num_remotes" -ge 3 ]] || {
    warn "expected to find more than 3 remotes but found only $num_remotes"
    (( fails++  ))
  }

  assert_repo_url upstream "prometheus-operator/prometheus-operator"  || (( fails++ ))
  assert_repo_url downstream "rhobs/obo-prometheus-operator"  || (( fails++ ))

  if [[ $fails -ne 0 ]]; then
    return 1
  fi

  ok "git remotes looks fine"
  return 0
}

make_required_targets(){
  header "Running format and generate"
  make --always-make format generate
  make --always-make docs
}

git_release_commit(){

  header "Adding release commit"

  git add .

  local version
  version="$(head -n1 VERSION)"

  git commit -s -F- <<- EOF_COMMIT_MSG
  chore(release): v${version}

  NOTE: This commit was auto-generated by
  running rhobs/$(basename "$0") script
EOF_COMMIT_MSG

}

run_checks(){
  header "Running checks"
  if ! $RUN_MAKE_CHECKS ; then
    warn "Skipping make checks"
    return 0
  fi

  make check-docs check-golang check-license check-metrics
  make test-unit
}

parse_args() {
  ### while there are args parse them
  while [[ -n "${1+xxx}" ]]; do
    case $1 in
    --no-checks)      RUN_MAKE_CHECKS=false; shift ;;
    *)              shift 1 ;; # skip rest
    esac
  done

  return 0
}

assert_repo_url() {
  local remote="$1"; shift
  local expected_url="$1"; shift

  local actual_url
  actual_url=$(git remote get-url "$remote")

  [[ "$actual_url" =~ $expected_url ]] || {
    warn "git remote '$remote' must point to $expected_url instead of $actual_url"
    return 1
  }

  return 0
}

main() {
  # all files references must be relative to the root of the project
  cd "$PROJECT_ROOT"

  parse_args "$@"

  validate_git_repos || {
    die "Please fix failures ☝️  and run the script again "
  }

  bumpup_version


  git_cherrypick_commits
  change_api_group
  change_container_image_repo 'quay.io/rhobs/obo-'
  make_required_targets
  generate_stripped_down_crds
  remove_upstream_release_workflows
  git_release_commit
  run_checks

  git diff --shortstat --exit-code
}

main "$@"

